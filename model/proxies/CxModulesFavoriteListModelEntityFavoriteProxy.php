<?php

namespace Cx\Model\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class CxModulesFavoriteListModelEntityFavoriteProxy extends \Cx\Modules\FavoriteList\Model\Entity\Favorite implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function getListId()
    {
        $this->_load();
        return parent::getListId();
    }

    public function setListId($listId)
    {
        $this->_load();
        return parent::setListId($listId);
    }

    public function getTitle()
    {
        $this->_load();
        return parent::getTitle();
    }

    public function setTitle($title)
    {
        $this->_load();
        return parent::setTitle($title);
    }

    public function getLink()
    {
        $this->_load();
        return parent::getLink();
    }

    public function setLink($link)
    {
        $this->_load();
        return parent::setLink($link);
    }

    public function getDescription()
    {
        $this->_load();
        return parent::getDescription();
    }

    public function setDescription($description)
    {
        $this->_load();
        return parent::setDescription($description);
    }

    public function getInfo()
    {
        $this->_load();
        return parent::getInfo();
    }

    public function setInfo($info)
    {
        $this->_load();
        return parent::setInfo($info);
    }

    public function getImage1()
    {
        $this->_load();
        return parent::getImage1();
    }

    public function setImage1($image1)
    {
        $this->_load();
        return parent::setImage1($image1);
    }

    public function getImage2()
    {
        $this->_load();
        return parent::getImage2();
    }

    public function setImage2($image2)
    {
        $this->_load();
        return parent::setImage2($image2);
    }

    public function getImage3()
    {
        $this->_load();
        return parent::getImage3();
    }

    public function setImage3($image3)
    {
        $this->_load();
        return parent::setImage3($image3);
    }

    public function getCatalog()
    {
        $this->_load();
        return parent::getCatalog();
    }

    public function setCatalog(\Cx\Modules\FavoriteList\Model\Entity\Catalog $catalog)
    {
        $this->_load();
        return parent::setCatalog($catalog);
    }

    public function __get($name)
    {
        $this->_load();
        return parent::__get($name);
    }

    public function getComponentController()
    {
        $this->_load();
        return parent::getComponentController();
    }

    public function setVirtual($virtual)
    {
        $this->_load();
        return parent::setVirtual($virtual);
    }

    public function isVirtual()
    {
        $this->_load();
        return parent::isVirtual();
    }

    public function validate()
    {
        $this->_load();
        return parent::validate();
    }

    public function __toString()
    {
        $this->_load();
        return parent::__toString();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'title', 'link', 'description', 'info', 'image1', 'image2', 'image3', 'catalog');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}