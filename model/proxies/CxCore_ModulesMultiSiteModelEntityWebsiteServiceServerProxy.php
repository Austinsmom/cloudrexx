<?php

namespace Cx\Model\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class CxCore_ModulesMultiSiteModelEntityWebsiteServiceServerProxy extends \Cx\Core_Modules\MultiSite\Model\Entity\WebsiteServiceServer implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function setId($id)
    {
        $this->_load();
        return parent::setId($id);
    }

    public function setHostname($hostname)
    {
        $this->_load();
        return parent::setHostname($hostname);
    }

    public function getHostname()
    {
        $this->_load();
        return parent::getHostname();
    }

    public function setLabel($label)
    {
        $this->_load();
        return parent::setLabel($label);
    }

    public function getLabel()
    {
        $this->_load();
        return parent::getLabel();
    }

    public function setSecretKey($secretKey)
    {
        $this->_load();
        return parent::setSecretKey($secretKey);
    }

    public function getSecretKey()
    {
        $this->_load();
        return parent::getSecretKey();
    }

    public function setInstallationId($installationId)
    {
        $this->_load();
        return parent::setInstallationId($installationId);
    }

    public function getInstallationId()
    {
        $this->_load();
        return parent::getInstallationId();
    }

    public function addWebsite(\Cx\Core_Modules\MultiSite\Model\Entity\Website $website)
    {
        $this->_load();
        return parent::addWebsite($website);
    }

    public function getWebsites()
    {
        $this->_load();
        return parent::getWebsites();
    }

    public function addWebsiteTemplate(\Cx\Core_Modules\MultiSite\Model\Entity\WebsiteTemplate $WebsiteTemplate)
    {
        $this->_load();
        return parent::addWebsiteTemplate($WebsiteTemplate);
    }

    public function getWebsiteTemplates()
    {
        $this->_load();
        return parent::getWebsiteTemplates();
    }

    public function setHttpAuthMethod($httpAuthMethod)
    {
        $this->_load();
        return parent::setHttpAuthMethod($httpAuthMethod);
    }

    public function getHttpAuthMethod()
    {
        $this->_load();
        return parent::getHttpAuthMethod();
    }

    public function setHttpAuthUsername($httpAuthUsername)
    {
        $this->_load();
        return parent::setHttpAuthUsername($httpAuthUsername);
    }

    public function getHttpAuthUsername()
    {
        $this->_load();
        return parent::getHttpAuthUsername();
    }

    public function setHttpAuthPassword($httpAuthPassword)
    {
        $this->_load();
        return parent::setHttpAuthPassword($httpAuthPassword);
    }

    public function getHttpAuthPassword()
    {
        $this->_load();
        return parent::getHttpAuthPassword();
    }

    public function __get($name)
    {
        $this->_load();
        return parent::__get($name);
    }

    public function getComponentController()
    {
        $this->_load();
        return parent::getComponentController();
    }

    public function setVirtual($virtual)
    {
        $this->_load();
        return parent::setVirtual($virtual);
    }

    public function isVirtual()
    {
        $this->_load();
        return parent::isVirtual();
    }

    public function validate()
    {
        $this->_load();
        return parent::validate();
    }

    public function __toString()
    {
        $this->_load();
        return parent::__toString();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'hostname', 'label', 'secretKey', 'installationId', 'httpAuthMethod', 'httpAuthUsername', 'httpAuthPassword', 'websites', 'websiteTemplates');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}