<?php

namespace Cx\Model\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class CxCore_ModulesMultiSiteModelEntityMailServiceServerProxy extends \Cx\Core_Modules\MultiSite\Model\Entity\MailServiceServer implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function setId($id)
    {
        $this->_load();
        return parent::setId($id);
    }

    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function setLabel($label)
    {
        $this->_load();
        return parent::setLabel($label);
    }

    public function getLabel()
    {
        $this->_load();
        return parent::getLabel();
    }

    public function setType($type)
    {
        $this->_load();
        return parent::setType($type);
    }

    public function getType()
    {
        $this->_load();
        return parent::getType();
    }

    public function setHostname($hostname)
    {
        $this->_load();
        return parent::setHostname($hostname);
    }

    public function getHostname()
    {
        $this->_load();
        return parent::getHostname();
    }

    public function setAuthUsername($authUsername)
    {
        $this->_load();
        return parent::setAuthUsername($authUsername);
    }

    public function getAuthUsername()
    {
        $this->_load();
        return parent::getAuthUsername();
    }

    public function setAuthPassword($authPassword)
    {
        $this->_load();
        return parent::setAuthPassword($authPassword);
    }

    public function getAuthPassword()
    {
        $this->_load();
        return parent::getAuthPassword();
    }

    public function getIpAddress()
    {
        $this->_load();
        return parent::getIpAddress();
    }

    public function setIpAddress($ipAddress)
    {
        $this->_load();
        return parent::setIpAddress($ipAddress);
    }

    public function setConfig($config)
    {
        $this->_load();
        return parent::setConfig($config);
    }

    public function getConfig()
    {
        $this->_load();
        return parent::getConfig();
    }

    public function setApiVersion($apiVersion)
    {
        $this->_load();
        return parent::setApiVersion($apiVersion);
    }

    public function getApiVersion()
    {
        $this->_load();
        return parent::getApiVersion();
    }

    public function addWebsite(\Cx\Core_Modules\MultiSite\Model\Entity\Website $website)
    {
        $this->_load();
        return parent::addWebsite($website);
    }

    public function removeWebsite(\Cx\Core_Modules\MultiSite\Model\Entity\Website $website)
    {
        $this->_load();
        return parent::removeWebsite($website);
    }

    public function getWebsites()
    {
        $this->_load();
        return parent::getWebsites();
    }

    public function createAccount(\Cx\Core_Modules\MultiSite\Model\Entity\Website $website)
    {
        $this->_load();
        return parent::createAccount($website);
    }

    public function deleteAccount($accountId)
    {
        $this->_load();
        return parent::deleteAccount($accountId);
    }

    public function enableService(\Cx\Core_Modules\MultiSite\Model\Entity\Website $website)
    {
        $this->_load();
        return parent::enableService($website);
    }

    public function disableService(\Cx\Core_Modules\MultiSite\Model\Entity\Website $website)
    {
        $this->_load();
        return parent::disableService($website);
    }

    public function __get($name)
    {
        $this->_load();
        return parent::__get($name);
    }

    public function getComponentController()
    {
        $this->_load();
        return parent::getComponentController();
    }

    public function setVirtual($virtual)
    {
        $this->_load();
        return parent::setVirtual($virtual);
    }

    public function isVirtual()
    {
        $this->_load();
        return parent::isVirtual();
    }

    public function validate()
    {
        $this->_load();
        return parent::validate();
    }

    public function __toString()
    {
        $this->_load();
        return parent::__toString();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'label', 'type', 'hostname', 'authUsername', 'authPassword', 'config', 'ipAddress', 'apiVersion', 'websites');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}