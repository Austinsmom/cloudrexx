<?php

namespace Cx\Model\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class CxCore_ModulesSyncModelEntityHostProxy extends \Cx\Core_Modules\Sync\Model\Entity\Host implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function setHost($host)
    {
        $this->_load();
        return parent::setHost($host);
    }

    public function getHost()
    {
        $this->_load();
        return parent::getHost();
    }

    public function setActive($active)
    {
        $this->_load();
        return parent::setActive($active);
    }

    public function getActive()
    {
        $this->_load();
        return parent::getActive();
    }

    public function setApiKey($apiKey)
    {
        $this->_load();
        return parent::setApiKey($apiKey);
    }

    public function getApiKey()
    {
        $this->_load();
        return parent::getApiKey();
    }

    public function setApiVersion($apiVersion)
    {
        $this->_load();
        return parent::setApiVersion($apiVersion);
    }

    public function getApiVersion()
    {
        $this->_load();
        return parent::getApiVersion();
    }

    public function setUrlTemplate($urlTemplate)
    {
        $this->_load();
        return parent::setUrlTemplate($urlTemplate);
    }

    public function getUrlTemplate()
    {
        $this->_load();
        return parent::getUrlTemplate();
    }

    public function addHostEntity(\Cx\Core_Modules\Sync\Model\Entity\HostEntity $hostEntity)
    {
        $this->_load();
        return parent::addHostEntity($hostEntity);
    }

    public function getHostEntities()
    {
        $this->_load();
        return parent::getHostEntities();
    }

    public function setHostEntities($hostEntities)
    {
        $this->_load();
        return parent::setHostEntities($hostEntities);
    }

    public function addChange(\Cx\Core_Modules\Sync\Model\Entity\Change $change)
    {
        $this->_load();
        return parent::addChange($change);
    }

    public function getChanges()
    {
        $this->_load();
        return parent::getChanges();
    }

    public function setChanges($changes)
    {
        $this->_load();
        return parent::setChanges($changes);
    }

    public function getToUri($dataSourceName, $entityIndexData = array (
))
    {
        $this->_load();
        return parent::getToUri($dataSourceName, $entityIndexData);
    }

    public function handleModelChange($entityIndexData, $entityClassName, $entity, $eventType, $spooler, $sync)
    {
        $this->_load();
        return parent::handleModelChange($entityIndexData, $entityClassName, $entity, $eventType, $spooler, $sync);
    }

    public function addContentsToChangeset($change)
    {
        $this->_load();
        return parent::addContentsToChangeset($change);
    }

    public function sendChange($change)
    {
        $this->_load();
        return parent::sendChange($change);
    }

    public function __get($name)
    {
        $this->_load();
        return parent::__get($name);
    }

    public function getComponentController()
    {
        $this->_load();
        return parent::getComponentController();
    }

    public function setVirtual($virtual)
    {
        $this->_load();
        return parent::setVirtual($virtual);
    }

    public function isVirtual()
    {
        $this->_load();
        return parent::isVirtual();
    }

    public function validate()
    {
        $this->_load();
        return parent::validate();
    }

    public function __toString()
    {
        $this->_load();
        return parent::__toString();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'host', 'active', 'apiKey', 'apiVersion', 'urlTemplate', 'hostEntities', 'changes');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}