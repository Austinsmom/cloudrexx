<?php

namespace Cx\Model\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class CxCore_ModulesMultiSiteModelEntityDomainProxy extends \Cx\Core_Modules\MultiSite\Model\Entity\Domain implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function setComponentId($componentId)
    {
        $this->_load();
        return parent::setComponentId($componentId);
    }

    public function setComponentType($componentType)
    {
        $this->_load();
        return parent::setComponentType($componentType);
    }

    public function setWebsite(\Cx\Core_Modules\MultiSite\Model\Entity\Website $website)
    {
        $this->_load();
        return parent::setWebsite($website);
    }

    public function getWebsite()
    {
        $this->_load();
        return parent::getWebsite();
    }

    public function getComponentId()
    {
        $this->_load();
        return parent::getComponentId();
    }

    public function getComponentType()
    {
        $this->_load();
        return parent::getComponentType();
    }

    public function setType($type)
    {
        $this->_load();
        return parent::setType($type);
    }

    public function getType()
    {
        $this->_load();
        return parent::getType();
    }

    public function setPleskId($pleskId)
    {
        $this->_load();
        return parent::setPleskId($pleskId);
    }

    public function getPleskId()
    {
        $this->_load();
        return parent::getPleskId();
    }

    public function setCoreNetDomainId($coreNetDomainId)
    {
        $this->_load();
        return parent::setCoreNetDomainId($coreNetDomainId);
    }

    public function getCoreNetDomainId()
    {
        $this->_load();
        return parent::getCoreNetDomainId();
    }

    public function setId($id)
    {
        $this->_load();
        return parent::setId($id);
    }

    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function setName($name)
    {
        $this->_load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->_load();
        return parent::getName();
    }

    public function getTld()
    {
        $this->_load();
        return parent::getTld();
    }

    public function getParts()
    {
        $this->_load();
        return parent::getParts();
    }

    public function getNameWithPunycode()
    {
        $this->_load();
        return parent::getNameWithPunycode();
    }

    public function __get($name)
    {
        $this->_load();
        return parent::__get($name);
    }

    public function getComponentController()
    {
        $this->_load();
        return parent::getComponentController();
    }

    public function setVirtual($virtual)
    {
        $this->_load();
        return parent::setVirtual($virtual);
    }

    public function isVirtual()
    {
        $this->_load();
        return parent::isVirtual();
    }

    public function validate()
    {
        $this->_load();
        return parent::validate();
    }

    public function __toString()
    {
        $this->_load();
        return parent::__toString();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'name', 'componentId', 'componentType', 'type', 'pleskId', 'coreNetDomainId');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}