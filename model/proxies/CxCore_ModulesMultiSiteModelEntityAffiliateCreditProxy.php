<?php

namespace Cx\Model\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class CxCore_ModulesMultiSiteModelEntityAffiliateCreditProxy extends \Cx\Core_Modules\MultiSite\Model\Entity\AffiliateCredit implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function setId($id)
    {
        $this->_load();
        return parent::setId($id);
    }

    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function setSubscription(\Cx\Modules\Order\Model\Entity\Subscription $subscription)
    {
        $this->_load();
        return parent::setSubscription($subscription);
    }

    public function getSubscription()
    {
        $this->_load();
        return parent::getSubscription();
    }

    public function setCredited($credited)
    {
        $this->_load();
        return parent::setCredited($credited);
    }

    public function getCredited()
    {
        $this->_load();
        return parent::getCredited();
    }

    public function setAmount($amount)
    {
        $this->_load();
        return parent::setAmount($amount);
    }

    public function getAmount()
    {
        $this->_load();
        return parent::getAmount();
    }

    public function setCurrency(\Cx\Modules\Crm\Model\Entity\Currency $currency)
    {
        $this->_load();
        return parent::setCurrency($currency);
    }

    public function getCurrency()
    {
        $this->_load();
        return parent::getCurrency();
    }

    public function setReferee(\Cx\Core\User\Model\Entity\User $referee)
    {
        $this->_load();
        return parent::setReferee($referee);
    }

    public function getReferee()
    {
        $this->_load();
        return parent::getReferee();
    }

    public function setPayout(\Cx\Core_Modules\MultiSite\Model\Entity\AffiliatePayout $payout)
    {
        $this->_load();
        return parent::setPayout($payout);
    }

    public function getpayout()
    {
        $this->_load();
        return parent::getpayout();
    }

    public function __get($name)
    {
        $this->_load();
        return parent::__get($name);
    }

    public function getComponentController()
    {
        $this->_load();
        return parent::getComponentController();
    }

    public function setVirtual($virtual)
    {
        $this->_load();
        return parent::setVirtual($virtual);
    }

    public function isVirtual()
    {
        $this->_load();
        return parent::isVirtual();
    }

    public function validate()
    {
        $this->_load();
        return parent::validate();
    }

    public function __toString()
    {
        $this->_load();
        return parent::__toString();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'credited', 'amount', 'subscription', 'currency', 'referee', 'payout');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}